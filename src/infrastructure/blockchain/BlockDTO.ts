/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2017 NEM
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import {HashData} from "../transaction/HashData";
import {TransactionDTO} from "../transaction/TransactionDTO";

/**
 *
 * -1: Only the nemesis blockchain has this type.
 * 1: Regular blockchain type.
 */
export type BlockType = 1 | -1;

/**
 * @internal
 * 0x68 << 24 + 1 (1744830465 as 4 byte integer): the main network version
 * 0x98 << 24 + 1 (-1744830463 as 4 byte integer): the test network version
 */
export type BlockVersion = 0x68 | 0x98;

/**
 * @internal
 * A blockchain is the structure that contains the transaction information. A blockchain can contain up to 120 transactions. Blocks are generated and signed by accounts and are the instrument by which information is spread in the network.
 */
export interface BlockDTO {

  /**
   * The number of seconds elapsed since the creation of the nemesis blockchain.
   */
  readonly timeStamp: number;

  /**
   * The signature of the blockchain. The signature was generated by the signer and can be used to validate that the blockchain data was not modified by a node.
   */
  readonly signature: string;

  /**
   * The sha3-256 hash of the last blockchain as hex-string.
   */
  readonly prevBlockHash: HashData;

  /**
   * The blockchain type
   */
  readonly type: BlockType;

  /**
   * The array of transaction structures
   */
  readonly transactions: TransactionDTO[];

  /**
   * The blockchain version
   */
  readonly version: BlockVersion;

  /**
   * The public key of the harvester of the blockchain as hexadecimal number.
   */
  readonly signer: string;

  /**
   * The height of the blockchain. Each blockchain has a unique height. Subsequent blocks differ in height by 1.
   */
  readonly height: number;
}
