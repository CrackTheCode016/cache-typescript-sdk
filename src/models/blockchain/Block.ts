/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2017 NEM
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import {BlockDTO} from "../../infrastructure/blockchain/BlockDTO";
import {BlockHeight} from "../../infrastructure/BlockHttp";
import {CreateSimpleTransactionFromDTO} from "../../infrastructure/transaction/CreateTransactionFromDTO";
import {HashData} from "../../infrastructure/transaction/HashData";
import {PublicAccount} from "../account/PublicAccount";
import {Transaction} from "../transaction/Transaction";

/**
 * 0x68 << 24 + 1 (1744830465 as 4 byte integer): the main network version
 * 0x98 << 24 + 1 (-1744830463 as 4 byte integer): the test network version
 */
export enum BlockVersion {
  MAIN_NET = 0x68,
  TEST_NET = 0x98,
}

/**
 * -1: Only the nemesis blockchain has this type.
 * 1: Regular blockchain type.
 */
export enum BlockType {
  NEMESIS = -1,
  REGULAR = 1,
}

/**
 * A blockchain is the structure that contains the transaction information. A blockchain can contain up to 120 transactions. Blocks are generated and signed by accounts and are the instrument by which information is spread in the network.
 */
export class Block {

  /**
   * The height of the blockchain. Each blockchain has a unique height. Subsequent blocks differ in height by 1.
   */
  public readonly height: BlockHeight;

  /**
   * The blockchain type
   */
  public readonly type: BlockType;

  /**
   * The number of seconds elapsed since the creation of the nemesis blockchain.
   */
  public readonly timeStamp: number;

  /**
   * The sha3-256 hash of the last blockchain as hex-string.
   */
  public readonly prevBlockHash: HashData;

  /**
   * The signature of the blockchain. The signature was generated by the signer and can be used to validate that the blockchain data was not modified by a node.
   */
  public readonly signature: string;

  /**
   * The public account of the harvester of the blockchain as hexadecimal number.
   */
  public readonly signer: PublicAccount;

  /**
   * The array of transaction
   */
  public readonly transactions: Transaction[];

  /**
   * The blockchain version
   */
  public readonly version: BlockVersion;

  /**
   * @internal
   * @param height
   * @param type
   * @param timeStamp
   * @param prevBlockHash
   * @param signature
   * @param signer
   * @param transactions
   * @param version
   */
  private constructor(height: BlockHeight,
                      type: BlockType,
                      timeStamp: number,
                      prevBlockHash: HashData,
                      signature: string,
                      signer: PublicAccount,
                      transactions: Transaction[],
                      version: BlockVersion) {
    this.height = height;
    this.type = type;
    this.timeStamp = timeStamp;
    this.prevBlockHash = prevBlockHash;
    this.signature = signature;
    this.signer = signer;
    this.transactions = transactions;
    this.version = version;
  }

  /**
   * @internal
   * @param dto
   * @returns {Block}
   */
  public static createFromBlockDTO(dto: BlockDTO): Block {
    return new Block(dto.height,
      dto.type,
      dto.timeStamp,
      dto.prevBlockHash,
      dto.signature,
      PublicAccount.createWithPublicKey(dto.signer),
      dto.transactions.map((transaction) => CreateSimpleTransactionFromDTO(transaction)),
      dto.version);
  }
}
